#extend("base"):
#export("title", "Lobby")
#export("additionalHead"):
<style type="text/css">
	.lobbyUser {
		max-height: 0;
		transition: max-height 0.5s linear;
		overflow: hidden;
	}
	.lobbyUser.active{
		max-height: 15em;
	}
</style>
#endexport
#export("body"):
<div class="row">
	<div class="col-md-8">
		<div class="card">
			<h1 class="card-header">Lobby</h1>
			<div class="card-body">
				<h2>Hello, #(username)!</h2>
				<div id="userList">

				</div>
			</div>
		</div>
	</div>
	<div class="col-md-4">
		<div class="card">
			<h1 class="card-header">Chat</h1>
			<div class="card-body overflow-auto">
				<div class="list-group list-group-flush" id="chatBox">
					<!-- content to be provided by javascript -->
				</div>
			</div>
			<div class="card-footer">
				<div class="input-group mb-3">
					<input id="textBox" type="text" class="form-control" placeholder="Message..." aria-label="Chat message" aria-describedby="sendButton">
					<div class="input-group-append">
						<button class="btn btn-outline-primary" type="button" id="sendButton" onClick="sendMessage()">Send</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<script>
	const username = '#(username)';
	let url = `ws://${window.location.host}/socket`;
	if (window.location.hostname != 'localhost'){
		url = url.replace('ws://', 'wss://') // can't use WSS when running locally, but on Heroku, it's fine
	}
	console.group('Socket Setup')
	console.log('Username is ' + username)
	console.log('Connecting to ' + url)
	console.groupEnd();
	var socket = new WebSocket(url);
	socket.onmessage = (e) => {
		console.log(e.data);
		const res = JSON.parse(e.data);
		const chatBox = document.getElementById('chatBox');
		const lobbyArea = document.getElementById('userList');
		switch (res.type){
			case 'userJoined':
				chatBox.innerHTML += `<div class="list-group-item"><p><strong>${res.user.username}</strong> joined the chat.</p></div>`;
				lobbyArea.innerHTML += `<div id="user_${res.user.id}" class="lobbyUser">User ${res.user.username}.</div>`
				setTimeout(() => {
					const newItem = document.getElementById(`user_${res.user.id}`);
					newItem.classList.add("active");
				}, 10);
				break;
			case 'message':
				chatBox.innerHTML += `<div class="list-group-item ${res.user.isSystem ? 'list-group-item-warning' : ''}"><h5 class="mb-1"><strong>${res.user.username}</strong>:</h5>${res.message}</div>`;
				break;
			case 'privateMessage':
				chatBox.innerHTML += `<div class="list-group-item ${res.user.isSystem ? 'list-group-item-warning' : 'list-group-item-info'}"><h5 class="mb-1"><strong>${res.user.username}</strong> to <strong>${res.toUser.username}</strong>:</h5>${res.message}</div>`;
				break;
			case 'userLeft':
				chatBox.innerHTML += `<div class="list-group-item"><p><strong>${res.user.username}</strong> left the chat.</p></div>`;
				const oldItem = document.getElementById(`user_${res.user.id}`);
				if (oldItem){
					oldItem.classList.remove('active');
					setTimeout(() => {
						oldItem.parentNode.removeChild(oldItem);
					}, 1000);
				}
				break;
		}
		console.log('handled')
	}

	socket.onopen = () => {
		console.group('Socket.onOpen');
		var joinRoomCommand = {
			command: 'joinRoom',
			room: 'default',
			username: username
		}
		var text = JSON.stringify(joinRoomCommand)
		console.log('converting object to JSON:', joinRoomCommand, text)
		socket.send(text)
		console.groupEnd();

		document.getElementById('textBox').onkeydown = (e) => {
			if (e.keyCode == 13){
				sendMessage()
				e.preventDefault()
			}
		}
	}

	function sendMessage(){
		const textBox = document.getElementById('textBox');
		if (!textBox.value) return; // no blank messages, thanks
		var messageBody = {
			command: 'sendMessage',
			messageBody: textBox.value
		}
		console.log('sending message: ', messageBody);
		var text = JSON.stringify(messageBody)
		socket.send(text);
		textBox.value = "";
		return false;
	}

	function invite(user){
		user = JSON.parse(user); // so it's an object
		var commandBody = {
			command: 'invite',
			user: user
		};
		var text = JSON.stringify(commandBody);
		socket.send(text);
		return false; // for even bubbling
	}

	function uninvite(user){ 
		user = JSON.parse(user); // so it's an object
		var commandBody = {
			command: 'uninvite',
			user: user
		};
		var text = JSON.stringify(commandBody);
		socket.send(text);
		return false; // for even bubbling
	}
</script> 
#endexport
#endextend
